const changeSmallIconColors = function(color) {
  for (var div in $$(.svg)) {
    div.html = div.html.replace(/fill="(#?[A-Z0-9]+)"/gi, String.$(fill="{color}"));
  }
}

const tempToColor = function(temp, units) {
  const COLORS = ["#b1695a", "#DB9864", "#E3BB88", "#D0C7A8", "#B1C2A3", "#80BBB2", "#6D9E96", "#8F95A5", "#6F7685"];
  var i = null;
  if (units === "metric") {
    if (temp > 30) {
      i = 0;
    } else if (temp > 26) {
      i = 1;
    } else if (temp > 22) {
      i = 2;
    } else if (temp > 18) {
      i = 3;
    } else if (temp > 14) {
      i = 4;
    } else if (temp > 10) {
      i = 5;
    } else if (temp > 6) {
      i = 6;
    } else if (temp > 2) {
      i = 7;
    } else {
      i = 8;
    }
  } else if (units === "imperial") {
    if (temp > 86) {
      i = 0;
    } else if (temp > 78) {
      i = 1;
    } else if (temp > 71) {
      i = 2;
    } else if (temp > 64) {
      i = 3;
    } else if (temp > 57) {
      i = 4;
    } else if (temp > 50) {
      i = 5;
    } else if (temp > 42) {
      i = 6;
    } else if (temp > 35) {
      i = 7;
    } else {
      i = 8;
    }
  }
  return COLORS[i];
}

function getCurrentDate() {
  const date = new Date();
  const weekday = date.toString("%a").toLowerCase();
  const month = date.toString("%B").toLowerCase();
  const day = date.toString("%d");
  const langAbbr = LANGUAGE_ABBREVIATIONS[root.LANG];
  const dict = buildDictionary("en", langAbbr);
  const weekdayXlated = dict[weekday];
  const monthXlated = dict[month];
  return String.$({weekdayXlated}, {monthXlated} {day});
}

function roundTemp(temp) {
  return Math.round(temp).toInteger();
}

async function updateDisplays(location, country, icon, temp, desc, units, days) {
  const color = updateMainDisplay(location, country, icon, temp, desc, units);
  await updateForecastDisplay(days, color);
  changeSmallIconColors(color);
  updateTrayIcon();
}

function updateMainDisplay(location, country, icon, temp, desc, units) {
  $(#main-display-icon).attributes["src"] = String.$(assets/icons/{icon}.svg);
  $(.large-temp).text = roundTemp(temp) + "°";
  $(#main-display-description).text = desc;
  $(#current-location).text = String.$({location}, {country});
  $(#current-date).text = getCurrentDate();
  const color = tempToColor(temp, units);
  $(body).style.set { background-color: color };
  return color;
}

function getNextWeekdayName(date, distance) {
  date.day += distance;
  const day = date.toString("%a").toLowerCase();
  const dictionary = buildDictionary("en", LANGUAGE_ABBREVIATIONS[root.LANG]);
  return dictionary[day];
}

async function updateForecastDisplay(days) {
  for (var (i, div) in $$(.forecast)) {
    div.$(.weekday).text = getNextWeekdayName(new Date(), i + 1);
    div.$(.temp).text = roundTemp(days[i].temperature) + "°";
    const svg = div.$(.svg);
    var html = "";
    svg.attributes["src"] = String.$(assets/icons/{days[i].icon}.svg);
    const [file] = await view.request { url: svg.attributes["src"] };
    while (true) {
      const line = file.readln();
      if (line == undefined) break;
      html += line;
    }
    svg.html = html;
  }
}

// https://openweathermap.org/weather-conditions
const weatherDescriptions = {
   200: "thunderstorm with light rain",
   202: "thunderstorm with heavy rain",
   211: "thunderstorm",
   221: "ragged thunderstorm",
   231: "thunderstorm with drizzle",
   300: "light intensity drizzle",
   302: "heavy intensity drizzle",
   311: "drizzle rain",
   313: "shower rain and drizzle",
   321: "shower drizzle",
   500: "light rain",
   502: "heavy intensity rain",
   504: "extreme rain",
   520: "light intensity shower rain",
   522: "heavy intensity shower rain",
   600: "light snow",
   602: "Heavy snow",
   612: "Light shower sleet",
   615: "Light rain and snow",
   620: "Light shower snow",
   622: "Heavy shower snow",
   701: "mist",
   721: "Haze",
   741: "fog",
   761: "dust",
   771: "squalls",
   800: "clear sky",
   801: "few clouds",
   802: "scattered clouds",
   803: "broken clouds",
   804: "overcast clouds"
};

function displayStormEffects(wdata) {
  const { id } = wdata.weather[0];
  removeStormEffects();
  if (wdata.weather[0].main === "Rain") {
    if (/light/i.test(weatherDescriptions[id])) {
      showRain(50);
    } else if (/heavy/i.test(weatherDescriptions[id])) {
      showRain(200);
    } else {
      showRain(100);
    }
  }

  if (wdata.weather[0].main === "Snow") {
    showSnow();
  }

  if (wdata.weather[0].icon === "11d" || wdata.weather[0].icon === "11n") {
    showThunder();
  }
}

async function refresh() {
  const lang = $(#lang).$(option:current).attributes["value"];
  const timeFormat = $(#normal-time).state.checked ? "24h" : "12h";
  const units = $(#C).state.checked ? "metric" : "imperial";
  const location = $(#city).value;
  const api_key = $(#api-key).value;
  if (api_key == "") return;
  const testing = false;
  const wdata = await fetchAllData(testing, units, location, api_key, lang);
  displayStormEffects(wdata);
}

$(#apply).on("click", refresh);

self.timer(300s, function() {
  refresh(); // returning true will not repeat the timer; it's an async function and returns a promise
  return true; 
});

updateTrayIcon();
//refresh(); execute in lang.tis instead