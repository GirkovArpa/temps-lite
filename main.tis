const DEBUGGING = false; 
DEBUGGING && view.connectToInspector && view.connectToInspector(rootElement, inspectorIpAddress);


$(a) << event click {
  const href = this.attributes["href"];
  Sciter.launch(href);
  return true;
} 

$(#quit) << event click {
  view.close();
}

function pad(digit) {
  const d = digit.toString();
  if (d.length == 1) return "0" + d;
  if (d.length == 0) return "00";
  return d;
}

function updateDate() {
  const date = new Date().toLocaleString(#time);
  const regex = /(\d+):(\d+):(\d+) (.*)/;
  const matches = date.match(regex);
  const [match, hours, minutes, seconds, meridian] = matches;
  const h = pad(hours);
  const m = pad(minutes);
  const H = root.TIME_FORMAT == "12h"
    ? h
    : pad(new Date().hour);
  const MERIDIAN = root.TIME_FORMAT == "12h"
    ? String.$( {meridian})
    : "";
  $(#time).text = String.$({H}:{m}{MERIDIAN});
  return true;
}

updateDate();

self.timer(1s, updateDate);

$(#military-time) << event click { 
  root.TIME_FORMAT = "24h";
  updateDate(); 
}
$(#normal-time) << event click { 
  root.TIME_FORMAT = "12h";
  updateDate();
}

async function initIcons() {
  for (var div in $$(.svg)) {
    var html = "";
    const [file] = await view.request { url: div.attributes["src"] };
    while (true) {
      const line = file.readln();
      if (line == undefined) break;
      html += line;
    }
    div.html = html.replace(/#FFFFFF/gi, "#444");
  }
}

initIcons();